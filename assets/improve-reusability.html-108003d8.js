import{_ as n,V as s,W as a,a0 as t}from"./framework-afccc25a.js";const p={},e=t(`<h1 id="提高复用性" tabindex="-1"><a class="header-anchor" href="#提高复用性" aria-hidden="true">#</a> 提高复用性</h1><h2 id="提高复用性的目的" tabindex="-1"><a class="header-anchor" href="#提高复用性的目的" aria-hidden="true">#</a> 提高复用性的目的</h2><ul><li>遵循DRY原则（Don&#39;t Repeat Yourself）</li><li>减少代码量，节省开销</li></ul><h2 id="什么是好的复用" tabindex="-1"><a class="header-anchor" href="#什么是好的复用" aria-hidden="true">#</a> 什么是好的复用</h2><ul><li>对象可以重复使用，不用修改</li><li>重复代码少</li><li>模块功能单一（低耦合）</li></ul><h2 id="减少代码数量-高效复用代码的设计模式" tabindex="-1"><a class="header-anchor" href="#减少代码数量-高效复用代码的设计模式" aria-hidden="true">#</a> 减少代码数量，高效复用代码的设计模式</h2><ul><li>桥接模式 <ul><li>目的：通过桥接代替耦合。</li><li>应用场景：减少模块之间的耦合。</li></ul></li><li>享元模式 <ul><li>目的：减少对象/代码数量。</li><li>应用场景：当代码中创建了大量类似的对象和类似的代码块。</li><li>要点：保留公用的代码逻辑，将需要改变的代码抽取成公共享元，通过参数来控制。</li></ul></li><li>模板方法模式 <ul><li>目的：定义一系列操作的骨架，简化后面类似操作的内容。</li><li>应用场景：当项目中出现很多类似操作内容。</li></ul></li></ul><h2 id="基本结构示例" tabindex="-1"><a class="header-anchor" href="#基本结构示例" aria-hidden="true">#</a> 基本结构示例</h2><h3 id="享元模式的基本结构" tabindex="-1"><a class="header-anchor" href="#享元模式的基本结构" aria-hidden="true">#</a> 享元模式的基本结构</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token comment">// 有一百种不同文字的弹窗，每种弹窗行为相同，但是文字和样式不同，</span>
  <span class="token comment">// 只需要一个类，不需要new100次弹窗。</span>
  <span class="token comment">// 这个类只保留所有弹窗共有的，每个弹窗不同的部分留作一个公共享元。</span>

  <span class="token keyword">function</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token comment">// 保留相同的部分</span>
  pop<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">action</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token comment">// 显示弹窗</span>
  pop<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">show</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> text <span class="token operator">=</span> config<span class="token punctuation">.</span>text <span class="token operator">||</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> color <span class="token operator">=</span> config<span class="token punctuation">.</span>text <span class="token operator">||</span> <span class="token string">&#39;green&#39;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 提取出每个弹窗不同的部分作为一个外部数组。</span>
  <span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&#39;文本1&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">&#39;green&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">text</span><span class="token operator">:</span> <span class="token string">&#39;文本2&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> popup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    popup<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="桥接模式的基本结构" tabindex="-1"><a class="header-anchor" href="#桥接模式的基本结构" aria-hidden="true">#</a> 桥接模式的基本结构</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token comment">// 有3种形状，每种形状都有3种颜色</span>
  <span class="token comment">// 对于这个需求，可以将颜色实现逻辑单独实现</span>
  <span class="token keyword">function</span> <span class="token function">showColor</span><span class="token punctuation">(</span><span class="token parameter">color</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">function</span> <span class="token function">rect</span><span class="token punctuation">(</span><span class="token parameter">color</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">showColor</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">function</span> <span class="token function">circle</span><span class="token punctuation">(</span><span class="token parameter">color</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">showColor</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">function</span> <span class="token function">delta</span><span class="token punctuation">(</span><span class="token parameter">color</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">showColor</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">new</span> <span class="token class-name">circle</span><span class="token punctuation">(</span><span class="token string">&#39;green&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="模板方法模式的基本结构" tabindex="-1"><a class="header-anchor" href="#模板方法模式的基本结构" aria-hidden="true">#</a> 模板方法模式的基本结构</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token comment">// 编写导航组件，功能和展示都可能各不相同。</span>
  <span class="token comment">// 导航组件多种多样，可能后面还会新增类型，因此可以先写一个基础的组件类，</span>
  <span class="token comment">// 具体的实现，延迟到具体的使用时再去实现。</span>
  <span class="token keyword">function</span> <span class="token function">baseNav</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 基础类，此处定下基本框架</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">function</span> <span class="token function">isFunction</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">&#39;[object function]&#39;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  baseNav<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">action</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 特异性的处理，留出一个回调等待具体实现</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFunction</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 执行自有方法</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="享元模式的应用示例" tabindex="-1"><a class="header-anchor" href="#享元模式的应用示例" aria-hidden="true">#</a> 享元模式的应用示例</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token comment">// 需求：项目中有一个文件上传功能，该功能可以上传多个文件。</span>
  <span class="token comment">//文件上传</span>
  <span class="token comment">// function uploader(fileType,file){</span>
  <span class="token comment">//   this.fileType=fileType;</span>
  <span class="token comment">//     this.file=file;</span>
  <span class="token comment">// }</span>
  <span class="token comment">// uploader.prototype.init=function(){</span>
  <span class="token comment">//   //初始化文件上传的html</span>
  <span class="token comment">// }</span>
  <span class="token comment">// uploader.prototype.delete=function(){</span>
  <span class="token comment">//   //删除掉该html</span>
  <span class="token comment">// }</span>
  <span class="token comment">// uploader.prototype.uploading=function(){</span>
  <span class="token comment">//   //上传</span>
  <span class="token comment">// }</span>
  <span class="token comment">// var fileob1,fileob2;</span>
  <span class="token comment">// new uploader(&#39;img&#39;, fileob1);</span>
  <span class="token comment">// new uploader(&#39;txt&#39;, fileob2);</span>

  <span class="token comment">// 使用享元模式</span>
  <span class="token keyword">function</span> <span class="token function">uploader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
  uploader<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">init</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//初始化文件上传的html</span>
  <span class="token punctuation">}</span>
  uploader<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">delete</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//删除掉该html</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// 公共享元</span>
  uploader<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">uploading</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">filetype<span class="token punctuation">,</span>file</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// 上传</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">var</span> data<span class="token operator">=</span><span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;img&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">file</span><span class="token operator">:</span> fileob1<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;txt&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">file</span><span class="token operator">:</span> fileob2<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>     
  <span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> uploader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">uploader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    uploader<span class="token punctuation">.</span><span class="token function">uploading</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>type<span class="token punctuation">,</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="桥接模式的示例" tabindex="-1"><a class="header-anchor" href="#桥接模式的示例" aria-hidden="true">#</a> 桥接模式的示例</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token comment">// 需求：创建不同的选中效果，有一组菜单，上面每种选项，都有不同的选中效果。</span>

  <span class="token keyword">function</span> <span class="token function">menuItem</span><span class="token punctuation">(</span><span class="token parameter">word<span class="token punctuation">,</span> color</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>word <span class="token operator">=</span> word<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>dom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>dom<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>word<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">function</span> <span class="token function">menuColor</span><span class="token punctuation">(</span><span class="token parameter">colorover<span class="token punctuation">,</span> colorout</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>colorover <span class="token operator">=</span> colorover<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>colorout <span class="token operator">=</span> colorout<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  menuItem<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">bind</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>dom<span class="token punctuation">.</span><span class="token function-variable function">onmouseover</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> self<span class="token punctuation">.</span>color<span class="token punctuation">.</span>colorover<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>dom<span class="token punctuation">.</span><span class="token function-variable function">onmouseout</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> self<span class="token punctuation">.</span>color<span class="token punctuation">.</span>colorout<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>  
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> data<span class="token operator">=</span><span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">word</span><span class="token operator">:</span> <span class="token string">&#39;menu1&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;red&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;black&#39;</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token literal-property property">word</span><span class="token operator">:</span> <span class="token string">&#39;menu2&#39;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;green&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;black&#39;</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> data<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">new</span> <span class="token class-name">menuItem</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>word<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">menuColor</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>color<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>color<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token comment">// 需求：Express中创建get等方法。express中有get、post等方法，如何方便快速的创建</span>

  <span class="token keyword">const</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;post&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;delete&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;put&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  methods<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">method</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    app<span class="token punctuation">[</span>method<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      route<span class="token punctuation">[</span>method<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>route<span class="token punctuation">,</span> <span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// methods.forEach(function(method) {</span>
  <span class="token comment">//   Route.prototype[method] = function() {</span>
  <span class="token comment">//     var handles = flatten(slice.call(arguments));</span>

  <span class="token comment">//     for(let i = 0; i &lt; handles.length; i++) {</span>
  <span class="token comment">//       var handle = handles[i];</span>
  <span class="token comment">//       if (typeof handle !== &#39;function&#39;) {</span>
  <span class="token comment">//         var type = toString.call(handle);</span>
  <span class="token comment">//         var msg = \`Route.\${method}() requires a callback function but get a \${type}\`;</span>
  <span class="token comment">//         throw new Error(msg);</span>
  <span class="token comment">//       }</span>

  <span class="token comment">//       debug(&#39;%s %o&#39;, method, this.paht);</span>
        
  <span class="token comment">//       var layer = Layer(&#39;/&#39;, {}, handle);</span>
  <span class="token comment">//       layer.method = method;</span>

  <span class="token comment">//       this.methods[method] = true;</span>
  <span class="token comment">//       this.stack.push(layer);</span>
  <span class="token comment">//     }</span>

  <span class="token comment">//     return this;</span>
  <span class="token comment">//   };</span>
  <span class="token comment">// });</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="模板方法模式的示例" tabindex="-1"><a class="header-anchor" href="#模板方法模式的示例" aria-hidden="true">#</a> 模板方法模式的示例</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token comment">// 需求：项目有一系列弹窗，每个弹窗的行为、大小、文字都不同。</span>
  <span class="token comment">// 模板方式模式的继承实现思路</span>
  <span class="token keyword">function</span> <span class="token function">basePop</span><span class="token punctuation">(</span><span class="token parameter">word<span class="token punctuation">,</span> size</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>word <span class="token operator">=</span> word<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> size<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>dom <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  basePop<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">init</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    div<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>word<span class="token punctuation">;</span>
    div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">.</span>width<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
    div<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">.</span>height<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>dom <span class="token operator">=</span> div<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  basePop<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">hidden</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>dom<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">&#39;none&#39;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  basePop<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">confirm</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>dom<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">&#39;none&#39;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">function</span> <span class="token function">ajaxPop</span><span class="token punctuation">(</span><span class="token parameter">word<span class="token punctuation">,</span> size</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">basePop</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> word<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  ajaxPop<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">basePop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">var</span> hidden <span class="token operator">=</span> ajaxPop<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>hidden<span class="token punctuation">;</span>
  ajaxPop<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">hidden</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">hidden</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">var</span> confirm <span class="token operator">=</span> ajaxPop<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>confirm<span class="token punctuation">;</span>
  ajaxPop<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">confirm</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">confirm</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token comment">// 需求：现在我们有一系列自己的算法，但是这个算法在不同的地方需要添加一些不同的操作。</span>
  <span class="token comment">// 模板方式模式的组合实现思路</span>

  <span class="token keyword">function</span> <span class="token function">counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>beforeCounter <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>afterCounter <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  counter<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">addBefore</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>beforeCounter<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  counter<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">addAfter</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>afterCounter<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  counter<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">count</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token comment">// 基础操作</span>
    <span class="token keyword">function</span> <span class="token function">baseCount</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      num <span class="token operator">+=</span> <span class="token number">4</span><span class="token punctuation">;</span>
      num <span class="token operator">*=</span> <span class="token number">4</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> num<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">var</span> _resultNum <span class="token operator">=</span> num<span class="token punctuation">;</span>
    <span class="token keyword">var</span> _arr <span class="token operator">=</span> <span class="token punctuation">[</span>baseCount<span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token comment">// 构造完整的执行方法队列</span>
    _arr <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>beforeCounter<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>_arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
    _arr <span class="token operator">=</span> _arr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>afterCounter<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">while</span><span class="token punctuation">(</span>_arr<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      _resultNum <span class="token operator">=</span> _arr<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>_resultNum<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> _resultNum<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 使用</span>
  <span class="token keyword">var</span> countObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  countObject<span class="token punctuation">.</span><span class="token function">addBefore</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    num<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> num<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  countObject<span class="token punctuation">.</span><span class="token function">addAfter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    num <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> num<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  countObject<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="javascript的组合与继承" tabindex="-1"><a class="header-anchor" href="#javascript的组合与继承" aria-hidden="true">#</a> JavaScript的组合与继承</h2><ul><li>组合 <ul><li>JavaScript最初没有专门的继承，所以最初JavaScript推崇函数式的编程， 然后进行统一组合桥接到一起。</li><li>桥接模式可以看出组合的一种体现，组合的好处是耦合低，方便方法复用，方便扩展。</li></ul></li><li>继承 <ul><li>在ES6出现class和extend，继承的方式多种多样，但是都是各有弊端。</li><li>模板方法模式可以看出继承的一种体现，继承的好处是可以自动获得父类的内容与接口， 方便统一化</li></ul></li><li>最佳实践 <ul><li>优先使用组合，其次才考虑继承。</li></ul></li></ul><h2 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h2><ul><li>桥接模式 <ul><li>通过独立方法间的桥接来形成整体功能，这样每个方法都可以被高度复用。</li></ul></li><li>享元模式 <ul><li>提取出公有部分与私有部分，私有部分作为外部数据传入。从而减少对象数量。</li></ul></li><li>模板方法模式 <ul><li>当一个功能朝着多样化发展，不妨先定义一个基础的方法，把具体实现延迟到后面。</li></ul></li></ul>`,26),o=[e];function c(i,l){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","improve-reusability.html.vue"]]);export{r as default};
