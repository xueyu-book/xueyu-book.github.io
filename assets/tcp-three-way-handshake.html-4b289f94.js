import{_ as e,V as c,W as d,a0 as o}from"./framework-afccc25a.js";const a={},i=o('<h1 id="tcp协议的三次握手过程" tabindex="-1"><a class="header-anchor" href="#tcp协议的三次握手过程" aria-hidden="true">#</a> TCP协议的三次握手过程</h1><h2 id="过程简述" tabindex="-1"><a class="header-anchor" href="#过程简述" aria-hidden="true">#</a> 过程简述</h2><ul><li>初始阶段，客户端<code>A</code>(Client)和服务端<code>B</code>(Server)都处于<code>CLOSED</code>(关闭)状态。主动打开连接的为客户端，被动打开连接的为服务端。</li><li>准备阶段，<code>B</code>的<code>TCP</code>服务器进程首先创建传输控制块<code>TCB</code>，准备接受客户端进程的连接请求。然后服务端就处于<code>LISTEN</code>(监听)状态，等待客户端的连接请求。</li><li>第一次握手：<code>A</code>的<code>TCP</code>客户端进程首先创建了传输控制块<code>TCB</code>。然后，在打算建立<code>TCP</code>连接时，向B发出连接请求报文段，这时首部中的同步位<code>SYN = 1</code>，同时选择一个初始序号<code>seq = x</code>。<code>TCP</code>规定，<code>SYN</code>报文段（即<code>SYN = 1</code>的报文段）不能携带数据，但要消耗掉一个序号。这时，<code>TCP</code>客户端进程进入<code>SYN-SENT</code>(同步已发送)状态。</li><li>第二次握手：<code>B</code>收到连接请求报文后，如果同意建立连接，则向<code>A</code>发送确认。在确认报文段中应把<code>SYN</code>位和<code>ACK</code>位都置1，确认号是<code>ack = x + 1</code>，同时也为自己选择一个初始序号<code>seq = y</code>。请注意，这个报文段也不能携带数据，但同样要消耗掉一个序号。这时<code>TCP</code>服务端进程进入<code>SYN-RCVD</code>(同步收到)状态。</li><li>第三次握手：<code>TCP</code>客户端进程收到<code>B</code>的确认后，还要向<code>B</code>给出确认。确认报文段的<code>ACK</code>置1，确认号是<code>ack = y + 1</code>，而自己的序号是<code>seq = x + 1</code>。这时<code>ACK</code>报文段可以携带数据。但如果不携带数据则不消耗序号，这种情况下，下一个数据报文段的序号仍是<code>seq = x + 1</code>。这时，<code>TCP</code>连接已经建立，<code>A</code>进入 <code>ESTABLISHED</code>(已建立连接)状态。</li><li>当<code>B</code>收到<code>A</code>的确认后，也进入<code>ESTABLISHED</code>(已建立连接)状态，此后双方就可以开始通信了。</li></ul><h2 id="常见问题" tabindex="-1"><a class="header-anchor" href="#常见问题" aria-hidden="true">#</a> 常见问题</h2><h3 id="三次握手的准备阶段说明" tabindex="-1"><a class="header-anchor" href="#三次握手的准备阶段说明" aria-hidden="true">#</a> 三次握手的准备阶段说明</h3><p>TCP协议目的是为了保证数据能在两端准确连续的流动，可以想象两个建立起TCP通道的设备就如同接起了一根水管，数据就是水管中的水由一头流向另一头。然而TCP为了能让一个设备连接多根“水管”，让一个设备能同时与多个设备交互信息，它必须要保证不同水管之间不会产生串联或相互影响，一根水管中的水绝不能流入另一根水管，要保证这样的效果，TCP协议使用socket数据结构来实现不同设备之间的连接。</p><p>socket包含两个成分，一个是IP地址，一个是端口号。同一个设备可以对应一个IP端口，但不同的“水管”用不同的端口号区分开来，于是同一个设备发送给其他不同设备的信息就不会产生混乱。在同一时刻，设备可能会产生多种数据需要分发给不同的设备，为了确保数据能够正确分发，TCP用一种叫做TCB，也叫传输控制块的数据结构把发给不同设备的数据封装起来，我们可以把该结构看做是信封。</p><p>一个TCB数据块包含了数据发送双方对应的socket信息以及拥有装载数据的缓冲区。在两个设备要建立连接发送数据之前，双方都必须要做一些准备工作，分配内存建立起TCB数据块就是连接建立前必须要做的准备工作。我们还需要了解的一点是TCP连接的建立方式，由于TCP协议建立在服务器–客户端的模式之上，因此对于两种不同角色的设备，他们发起连接的方式不一样。</p><p>客户端发起连接的方式叫Active Open。也就是客户端需要主动向服务器发送消息，表达自己想建立数据连接的请求,通常而言客户端会向服务器发送一个SYNC数据包。服务器发起连接的方式叫Passive Open，通来说服务器不可能知道当前时刻有哪个设备想向它发起连接，因此它只能构建一个端口，然后监听该端口，等待客户端从该端口向它发起连接请求。在OPEN阶段无论是客户端还是服务器都需要准备好TCB数据结构，但由于服务器不知道要连接它的客户端信息，因此在构建TCB模块时会默认将客户端对应的socket数据初始化为0。</p><p>当双方都把自己的socket和TCB数据结构准备好后，双方就可以进入所谓的「三次握手」连接建立过程。</p><h3 id="如果已经建立了连接-但是客户端突然出现故障了怎么办" tabindex="-1"><a class="header-anchor" href="#如果已经建立了连接-但是客户端突然出现故障了怎么办" aria-hidden="true">#</a> 如果已经建立了连接，但是客户端突然出现故障了怎么办？</h3><p>TCP设有一个保活计时器。服务端每收到一次客户端的请求后都会重新复位这个计时器，时间通常是设置<code>2小时</code>，若两小时还没有收到客户端的任何数据，服务端就会发送一个探测报文段，以后<code>每隔75秒</code>发送一次。若一连发送<code>10个</code>探测报文仍然没有反应，服务端就认为客户端出了故障，接着就关闭连接了。</p>',12),t=[i];function r(h,s){return c(),d("div",null,t)}const C=e(a,[["render",r],["__file","tcp-three-way-handshake.html.vue"]]);export{C as default};
