import{_ as e,V as i,W as a,a0 as l}from"./framework-afccc25a.js";const d={},c=l('<h1 id="cdn工作原理" tabindex="-1"><a class="header-anchor" href="#cdn工作原理" aria-hidden="true">#</a> CDN工作原理</h1><h2 id="原理简介" tabindex="-1"><a class="header-anchor" href="#原理简介" aria-hidden="true">#</a> 原理简介</h2><p>当用户访问使用CDN服务的网站时，本地DNS服务器通过<code>CNAME</code>方式将最终域名请求重定向到CDN服务。CDN通过一组预先定义好的策略(如内容类型、地理区域、网络负载状况等)，将当时能够最快响应用户的CDN节点IP地址提供给用户，使用户可以以最快的速度获得网站内容。它能够有效解决网络带宽小、用户访问量大、网点分布不均等问题。</p><h2 id="工作流程" tabindex="-1"><a class="header-anchor" href="#工作流程" aria-hidden="true">#</a> 工作流程</h2><ul><li>当终端用户向<code>www.xueyu.studio</code>下的指定资源发起请求时，首先向LDNS（本地DNS）发起域名解析请求。</li><li>LDNS检查缓存中是否有<code>www.xueyu.studio</code>的IP地址记录。如果有，则直接返回给终端用户；如果没有，则向授权DNS查询。</li><li>当授权DNS解析<code>www.xueyu.studio</code>时，返回域名CNAME <code>www.xueyustudio.cdn.com</code>对应IP地址。</li><li>域名解析请求发送至DNS调度系统，并为请求分配最佳节点IP地址（距离终端用户最近且可用）。</li><li>LDNS获取DNS返回的解析IP地址。</li><li>用户获取解析IP地址。</li><li>用户向获取的IP地址发起对该资源的访问请求。</li><li>如果该IP地址对应的节点已缓存该资源，则会将数据直接返回给用户，请求结束。</li><li>如果该IP地址对应的节点未缓存该资源，则节点向源站发起对该资源的请求。获取资源后，结合用户自定义配置的缓存策略，将资源缓存至节点，并返回给用户，请求结束。</li></ul><h2 id="优点" tabindex="-1"><a class="header-anchor" href="#优点" aria-hidden="true">#</a> 优点</h2><ul><li>加速网站的访问</li><li>实现跨运营商、跨地域的全网覆盖</li><li>保障你的网站安全（例如分布式阻断服务攻击等）</li><li>异地备援（最大限度避免服务器宕机）</li><li>为了节约成本（减轻购买服务器与后续的托管运维）</li><li>开发者更加专注业务本身</li></ul><h2 id="缺点" tabindex="-1"><a class="header-anchor" href="#缺点" aria-hidden="true">#</a> 缺点</h2><ul><li>存在数据同步延时，主服务器端和各地缓存器可能会存在不同步的情况。</li></ul>',9),o=[c];function r(h,t){return i(),a("div",null,o)}const s=e(d,[["render",r],["__file","how-cdn-work.html.vue"]]);export{s as default};
